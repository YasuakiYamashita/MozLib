//==============================================================================
//
// 行列4x4[Matrix4x4.cpp]
// Author : Yasuaki Yamashita : 2014/05/23
//
//==============================================================================

//******************************************************************************
// include
//******************************************************************************
#include "mozMath.h"


namespace moz
{
	namespace math
	{

		//------------------------------------------------------------------------------
		// コンストラクタ
		//------------------------------------------------------------------------------
		Matrix4x4::Matrix4x4(
			float f11, float f12, float f13, float f14,
			float f21, float f22, float f23, float f24,
			float f31, float f32, float f33, float f34,
			float f41, float f42, float f43, float f44
			)
		{

			a._11 = (f11), a._12 = (f12), a._13 = (f13), a._14 = (f14);
			a._21 = (f21), a._22 = (f22), a._23 = (f23), a._24 = (f24);
			a._31 = (f31), a._32 = (f32), a._33 = (f33), a._34 = (f34);
			a._41 = (f41), a._42 = (f42), a._43 = (f43), a._44 = (f44);
		}

		Matrix4x4::Matrix4x4(const float * f)
		{

			a._11 = (f[0]), a._12 = (f[1]), a._13 = (f[2]), a._14 = (f[3]);
			a._21 = (f[4]), a._22 = (f[5]), a._23 = (f[6]), a._24 = (f[7]);
			a._31 = (f[8]), a._32 = (f[9]), a._33 = (f[10]), a._34 = (f[11]);
			a._41 = (f[12]), a._42 = (f[13]), a._43 = (f[14]), a._44 = (f[15]);
		}

		Matrix4x4::Matrix4x4(const Matrix4x4& f)
		{
			a._11 = (f.m[0][0]), a._12 = (f.m[0][1]), a._13 = (f.m[0][2]), a._14 = (f.m[0][3]);
			a._21 = (f.m[1][0]), a._22 = (f.m[1][1]), a._23 = (f.m[1][2]), a._24 = (f.m[1][3]);
			a._31 = (f.m[2][0]), a._32 = (f.m[2][1]), a._33 = (f.m[2][2]), a._34 = (f.m[2][3]);
			a._41 = (f.m[3][0]), a._42 = (f.m[3][1]), a._43 = (f.m[3][2]), a._44 = (f.m[3][3]);
		}

		//------------------------------------------------------------------------------
		// 行列の和
		//------------------------------------------------------------------------------
		Matrix4x4 Matrix4x4::operator + (const Matrix4x4& _a) const
		{
			return Matrix4x4(
				a._11 + _a.a._11, a._12 + _a.a._12, a._13 + _a.a._13, a._14 + _a.a._14,
				a._21 + _a.a._21, a._22 + _a.a._22, a._23 + _a.a._23, a._24 + _a.a._24,
				a._31 + _a.a._31, a._32 + _a.a._32, a._33 + _a.a._33, a._34 + _a.a._34,
				a._41 + _a.a._41, a._42 + _a.a._42, a._43 + _a.a._43, a._44 + _a.a._44
				);
		}

		//------------------------------------------------------------------------------
		// 行列の和
		//------------------------------------------------------------------------------
		Matrix4x4 Matrix4x4::operator * (float f) const
		{
			return Matrix4x4(
				a._11*f, a._12*f, a._13*f, a._14*f,
				a._21*f, a._22*f, a._23*f, a._24*f,
				a._31*f, a._32*f, a._33*f, a._34*f,
				a._41*f, a._42*f, a._43*f, a._44*f
				);
		}

		//------------------------------------------------------------------------------
		// 
		//------------------------------------------------------------------------------
		Matrix4x4 Matrix4x4::operator / (float _f) const
		{
			float f = 1.f / _f;
			return Matrix4x4(
				a._11*f, a._12*f, a._13*f, a._14*f,
				a._21*f, a._22*f, a._23*f, a._24*f,
				a._31*f, a._32*f, a._33*f, a._34*f,
				a._41*f, a._42*f, a._43*f, a._44*f
				);
		}


		//------------------------------------------------------------------------------
		// 行列の和
		//------------------------------------------------------------------------------
		Matrix4x4 Matrix4x4::operator * (const Matrix4x4& _a) const
		{
			Matrix4x4 s;

			s.a._11 = a._11 * _a.a._11 + a._12 * _a.a._21 + a._13 * _a.a._31 + a._14 * _a.a._41;
			s.a._12 = a._11 * _a.a._12 + a._12 * _a.a._22 + a._13 * _a.a._32 + a._14 * _a.a._42;
			s.a._13 = a._11 * _a.a._13 + a._12 * _a.a._23 + a._13 * _a.a._33 + a._14 * _a.a._43;
			s.a._14 = a._11 * _a.a._14 + a._12 * _a.a._24 + a._13 * _a.a._34 + a._14 * _a.a._44;

			s.a._21 = a._21 * _a.a._11 + a._22 * _a.a._21 + a._23 * _a.a._31 + a._24 * _a.a._41;
			s.a._22 = a._21 * _a.a._12 + a._22 * _a.a._22 + a._23 * _a.a._32 + a._24 * _a.a._42;
			s.a._23 = a._21 * _a.a._13 + a._22 * _a.a._23 + a._23 * _a.a._33 + a._24 * _a.a._43;
			s.a._24 = a._21 * _a.a._14 + a._22 * _a.a._24 + a._23 * _a.a._34 + a._24 * _a.a._44;

			s.a._31 = a._31 * _a.a._11 + a._32 * _a.a._21 + a._33 * _a.a._31 + a._34 * _a.a._41;
			s.a._32 = a._31 * _a.a._12 + a._32 * _a.a._22 + a._33 * _a.a._32 + a._34 * _a.a._42;
			s.a._33 = a._31 * _a.a._13 + a._32 * _a.a._23 + a._33 * _a.a._33 + a._34 * _a.a._43;
			s.a._34 = a._31 * _a.a._14 + a._32 * _a.a._24 + a._33 * _a.a._34 + a._34 * _a.a._44;

			s.a._41 = a._41 * _a.a._11 + a._42 * _a.a._21 + a._43 * _a.a._31 + a._44 * _a.a._41;
			s.a._42 = a._41 * _a.a._12 + a._42 * _a.a._22 + a._43 * _a.a._32 + a._44 * _a.a._42;
			s.a._43 = a._41 * _a.a._13 + a._42 * _a.a._23 + a._43 * _a.a._33 + a._44 * _a.a._43;
			s.a._44 = a._41 * _a.a._14 + a._42 * _a.a._24 + a._43 * _a.a._34 + a._44 * _a.a._44;

			return s;
		}
	}
}
//EOF