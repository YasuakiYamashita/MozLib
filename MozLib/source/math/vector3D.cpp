//==============================================================================
//
// 3Dベクトル[vector3D.cpp]
// Author : Yasuaki Yamashita : 2014/05/09
//
//==============================================================================

//******************************************************************************
// include
//******************************************************************************
#include <math.h>
#include "mozMath.h"

namespace moz
{
	namespace math
	{
		//------------------------------------------------------------------------------
		// コンスラクタ
		//------------------------------------------------------------------------------
		Vector3D::Vector3D(float _x, float _y, float _z)
		{
			v.x = _x;
			v.y = _y;
			v.z = _z;
		}

		//------------------------------------------------------------------------------
		// ベクタスカラ倍
		//------------------------------------------------------------------------------
		Vector3D Vector3D::operator*(float f) const
		{
			return Vector3D(v.x*f, v.y*f, v.z*f);
		}

		//------------------------------------------------------------------------------
		// ベクタスカラ倍
		//------------------------------------------------------------------------------
		Vector3D Vector3D::operator/(float f) const
		{
			// 逆数とって計算したほうが早い
			float fInv = 1.f / f;
			return Vector3D(v.x*fInv, v.y*fInv, v.z*fInv);
		}

		//------------------------------------------------------------------------------
		// ベクタ同士の足し算
		//------------------------------------------------------------------------------
		Vector3D Vector3D::operator+(const Vector3D& _v) const
		{
			return Vector3D(v.x + _v.v.x, v.y + _v.v.y, v.z + _v.v.z);
		}

		//------------------------------------------------------------------------------
		// ベクタ同士の差
		//------------------------------------------------------------------------------
		Vector3D Vector3D::operator-(const Vector3D& _v) const
		{
			return Vector3D(v.x - _v.v.x, v.y - _v.v.y, v.z - _v.v.z);
		}

		//------------------------------------------------------------------------------
		// ベクタの前に書かれてた+記号
		//------------------------------------------------------------------------------
		Vector3D Vector3D::operator+() const
		{
			return *this;
		}

		//------------------------------------------------------------------------------
		// ベクタの前に書かれてた-記号
		//------------------------------------------------------------------------------
		Vector3D Vector3D::operator-() const
		{
			return Vector3D(-v.x, -v.y, -v.z);
		}

		//------------------------------------------------------------------------------
		// ベクタスカラ倍の代入
		//------------------------------------------------------------------------------
		Vector3D& Vector3D::operator*=(float f)
		{
			v.x *= f;
			v.y *= f;
			v.z *= f;
			return *this;
		}

		//------------------------------------------------------------------------------
		// ベクタスカラ倍の代入
		//------------------------------------------------------------------------------
		Vector3D& Vector3D::operator/=(float f)
		{
			float fInv = 1.f / f;
			v.x *= fInv;
			v.y *= fInv;
			v.z *= fInv;
			return *this;
		}

		//------------------------------------------------------------------------------
		// ベクタの和と代入の合成
		//------------------------------------------------------------------------------
		Vector3D& Vector3D::operator+=(const Vector3D& _v)
		{
			v.x += _v.v.x;
			v.y += _v.v.y;
			v.z += _v.v.z;
			return *this;
		}

		//------------------------------------------------------------------------------
		// ベクタの和と代入の合成
		//------------------------------------------------------------------------------
		Vector3D& Vector3D::operator-=(const Vector3D& _v)
		{
			v.x -= _v.v.x;
			v.y -= _v.v.y;
			v.z -= _v.v.z;
			return *this;
		}

		//------------------------------------------------------------------------------
		// 内積
		//------------------------------------------------------------------------------
		float Vector3D::Dot(const Vector3D& vec)
		{
			return v.x * vec.v.x + v.y * vec.v.y + v.z * vec.v.z;
		}

		//------------------------------------------------------------------------------
		// 外積
		//------------------------------------------------------------------------------
		Vector3D Vector3D::Cross(const Vector3D& vec)
		{
			return Vector3D(
				v.y*vec.v.z - v.z*vec.v.y,
				v.z*vec.v.x - v.x*vec.v.z,
				v.x*vec.v.y - v.y*vec.v.x);
		}

		//------------------------------------------------------------------------------
		// 長さ取得
		//------------------------------------------------------------------------------
		float Vector3D::GetLength(void)
		{
			#define POW2(x) ((x)*(x))
			return sqrtf(POW2(v.x) + POW2(v.y) + POW2(v.z));
		}

		//------------------------------------------------------------------------------
		// 正規化
		//------------------------------------------------------------------------------
		void Vector3D::Normalize(void)
		{
			float len = GetLength();
			if (len != 0)
			{
				float scale = 1.f / len;
				v.x *= scale;
				v.y *= scale;
				v.z *= scale;
			}
		}
	}
}